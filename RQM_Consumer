####################################ячейка в Google Colab №1 - установка и импорт библиотек###########################################
#установка библиотек
!pip install pika
!pip install kafka-python 

#импорт модулей 
import pika
import json
import random
import time

####################################ячейка в Google Colab №2 - потребление из RabbitMQ###########################################

# Подключение к серверу RabbitMQ server в облачной платформе cloudamqp.com 
connection = pika.BlockingConnection(pika.URLParameters('.........здесь взять адрес подключения к своему инстансу в https://customer.cloudamqp.com/instance'))
channel = connection.channel()

#объявление очереди RQM
inputs_queue = channel.queue_declare(queue='InputsQueue')
#ИЛИ
#объявление очереди RQM
questions_queue = channel.queue_declare(queue='OtherQuestionsQueue')

#определяем функцию обратного вызова для потребления сообщений из очереди RQM
def on_inputs_message(ch, method, properties, body):

 try:
  #обработка полезной нагрузки в JSON 
  dictData = json.loads(body)
  print("Входящее обращение от ", dictData['id'], "клиент ", dictData['name'], "тема ", dictData['subject'], "содержание ", dictData['content'])

 except Exception as e:
  #запись ошибок в лог-файл на Google Диске
  error_str = f"Error: {str(e)}, Value: {data}\n"
  with open("dlq.txt", "a") as f:
      f.write(error_str)
  print(f"Error: {str(e)}")

#потребляем данные из RabbitMQ
while True:
 print('Waiting for messages. To exit press CTRL+C')
 
 #привязка к очереди fanout-обменника RQM
 channel.basic_consume(queue=inputs_queue.method.queue, on_message_callback=on_inputs_message, auto_ack=True)
 #ИЛИ
 #привязка к очереди headers-обменника RQM
 channel.basic_consume(queue=questions_queue.method.queue, on_message_callback=on_inputs_message, auto_ack=True)

 channel.start_consuming()

####################################ячейка в Google Colab №3 - закрытие соединения###########################################
#Закрываем соединения
channel.close()
connection.close()
